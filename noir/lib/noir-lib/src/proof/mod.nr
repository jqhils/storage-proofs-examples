use crate::bytes::{byte_to_nibbles, bytes_as_nibbles};
use crate::rlp::{
    decode_rlp_header, decode_rlp_list_fragments, encode_rlp_string, RLP_DATA_TYPE_LIST,
    RlpFragment,
};
use dep::std::hash::keccak256;

pub fn verify<let NODES_LEN: u32, let LEAF_LEN: u32>(
    key: [u8; 32],
    value: [u8; 32],
    storage_hash: [u8; 32],
    nodes: [[u8; 532]; NODES_LEN],
    leaf: [u8; LEAF_LEN],
    depth: u32,
) {
    let leaf_value = extract_value(key, storage_hash, nodes, leaf, depth);
    for i in 0..32 {
        // Add bounds check
        // println(f"LEAF_LEN: {LEAF_LEN}");
        if leaf_value.offset + i < LEAF_LEN {
            assert(leaf[leaf_value.offset + i] == value[i], "Value mismatch");
        } else {
            // If we run out of leaf data, assume remaining value is 0
            assert(value[i] == 0, "Value mismatch (expected 0)");
        }
    }
}

pub fn extract_value<let NODES_LEN: u32, let LEAF_LEN: u32>(
    key: [u8; 32],
    storage_hash: [u8; 32],
    nodes: [[u8; 532]; NODES_LEN],
    leaf: [u8; LEAF_LEN],
    depth: u32,
) -> RlpFragment {
    let nibbles = bytes_as_nibbles(key);
    let mut key_index = 0;
    let mut curr_hash = storage_hash;
    for i in 0..NODES_LEN {
        if i < depth - 1 {
            let node = nodes[i];

            // Decode RLP header
            let rlp_header = unsafe { decode_rlp_header(node) };
            assert(rlp_header.data_type == RLP_DATA_TYPE_LIST, "Invalid data type");

            // Validate node hash
            let node_hash: [u8; 32] = unsafe { get_node_hash(rlp_header, node) };
            // println(f"i={i}: node={node_hash}, curr={curr_hash}");
            assert(node_hash == curr_hash, "Invalid hash");

            // Create next hash
            let rlp_list: BoundedVec<RlpFragment, 17> = unsafe { decode_rlp_list_fragments(rlp_header, node) };
            let index = if rlp_list.len() == 17 {
                nibbles[key_index] as u32
            } else {
                1
            };
            let rlp_item = rlp_list.get(index);
            assert(rlp_item.length == 32, "Invalid length");
            curr_hash = unsafe { copy(node, rlp_item.offset) };
            key_index += 1;
        }
    }

    // Verify leaf
    let rlp_header = unsafe { decode_rlp_header(leaf) };
    assert(rlp_header.data_type == RLP_DATA_TYPE_LIST, "Invalid data type");

    let resolved_hash = unsafe { get_node_hash(rlp_header, leaf) };
    // println(f"leaf: {resolved_hash}, curr={curr_hash}");
    assert(resolved_hash == curr_hash, "Invalid hash");

    let rlp_list: BoundedVec<RlpFragment, 2> = unsafe { decode_rlp_list_fragments(rlp_header, leaf) }   ;
    assert(rlp_list.len() == 2, "Invalid length");

    let leaf_key_item = rlp_list.get(0);
    let leaf_key = unsafe { get_leaf_key(leaf, leaf_key_item) };

    for i in 0..59 {
        if (i < leaf_key.len()) & (key_index + i < nibbles.len()) {
            assert(leaf_key[i] == nibbles[key_index + i], "Key mismatch in the leaf");
        }
    }

    key_index += leaf_key.len();
    assert(key_index >= nibbles.len(), "Expected to consume all key nibbles");

    rlp_list.get(1)
}

fn get_leaf_key<let LEAF_LEN: u32>(leaf: [u8; LEAF_LEN], rlp_fragment: RlpFragment) -> [u8] {
    let (prefix, _) = byte_to_nibbles(leaf[rlp_fragment.offset]);
    assert((prefix == 2) | (prefix == 3), "Leaf parity prefix must be 2 or 3");
    // println(f"prefix: {prefix}, rlp_fragment: {rlp_fragment}");
    let prefixed_key_bytes: [u8; 32] = unsafe { copy_safe(leaf, rlp_fragment.offset, rlp_fragment.length) }; // Issue with this line
    let prefixed_key_nibbles: [u8] = bytes_as_nibbles(prefixed_key_bytes).as_slice();
    let (prefix, key_nibbles) = prefixed_key_nibbles.pop_front();
    if (prefix % 2 == 0) {
        let (parity_prefix, key_nibbles) = key_nibbles.pop_front();
        assert(parity_prefix == 0, "Parity prefix must be 0");
        key_nibbles
    } else {
        key_nibbles
    }
}

unconstrained fn copy<let N: u32, let M: u32>(arr: [u8; N], offset: u32) -> [u8; M] {
    let mut result: [u8; M] = [0; M];
    for i in 0..M {
        result[i] = arr[offset + i];
    }
    result
}

unconstrained fn copy_safe<let N: u32, let M: u32>(
    arr: [u8; N], 
    offset: u32, 
    length: u32
) -> [u8; M] {
    let mut result: [u8; M] = [0; M];
    let max_len = if M < length { M } else { length };
    for i in 0..max_len {
        if offset + i < N {
            result[i] = arr[offset + i];
        }
    }
    result
}

pub unconstrained fn get_key_hash<let N: u32>(key: [u8; N], message_size: u32) -> [u8; 32] {
    let key_hash = keccak256(key, message_size);
    key_hash
}

unconstrained fn get_node_hash<let NODE_LEN: u32>(
    rlp_header: RlpFragment,
    node: [u8; NODE_LEN],
) -> [u8; 32] {
    let node_len = rlp_header.length + rlp_header.offset;
    let resolved_hash: [u8; 32] = keccak256(node, node_len);
    resolved_hash
}

pub fn get_storage_key<let N: u32>(values: [[u8; 32]; N]) -> [u8; 32] {
    let mut input: [u8; N * 32] = [0; N * 32];
    for i in 0..N {
        for j in 0..32 {
            input[i * 32 + j] = values[i][j];
        }
    }
    let key = keccak256(input, input.len());
    unsafe { get_key_hash(key, key.len()) }     
}

pub fn get_storage_value(field: Field) -> [u8; 32] {
    let value_bytes: [u8; 32] = field.to_be_bytes();
    let value_rlp = encode_rlp_string(value_bytes);
    value_rlp
}

#[test]
fn test_extension_node() {
    let key = [
        0x5a, 0x2c, 0x22, 0x15, 0x9a, 0x93, 0x50, 0x4b, 0xef, 0x3f, 0x17, 0x41, 0x08, 0xe0, 0x22,
        0xfc, 0x5e, 0x36, 0xef, 0xba, 0xf4, 0x1d, 0xb9, 0xf4, 0x7c, 0x9e, 0x91, 0x1c, 0x5a, 0x84,
        0x33, 0x6a,
    ];
    let storage_value = 0x10f0cf064dd59200000;
    let storage_hash = [
        0x34, 0xde, 0x45, 0x97, 0x59, 0x37, 0x39, 0xe9, 0xc8, 0xa3, 0x4e, 0x06, 0x86, 0xe2, 0xf5,
        0x97, 0xd9, 0x07, 0xad, 0x36, 0x90, 0xaa, 0x76, 0xa4, 0x33, 0xe8, 0xc0, 0x9c, 0x8a, 0x7f,
        0x06, 0x93,
    ];
    let storage_nodes = [
        [
            0xf9, 0x02, 0x11, 0xa0, 0x28, 0xa7, 0x1c, 0xcb, 0x5a, 0xaa, 0x3c, 0x97, 0xb4, 0x88,
            0x94, 0xb6, 0x02, 0xbd, 0x09, 0x03, 0x9e, 0x4c, 0x29, 0x56, 0x89, 0xc4, 0xe5, 0xa9,
            0xff, 0xbd, 0x70, 0xa9, 0xea, 0x63, 0x25, 0x67, 0xa0, 0x32, 0x24, 0xfd, 0x1a, 0x2c,
            0x31, 0x0b, 0xfa, 0x08, 0x94, 0xa6, 0xea, 0x97, 0x22, 0xea, 0x6b, 0x8c, 0x7b, 0xe8,
            0xf6, 0xdc, 0xd8, 0xf3, 0x9b, 0xcf, 0xa9, 0x9f, 0x99, 0xe4, 0xeb, 0x83, 0xff, 0xa0,
            0x88, 0xc4, 0xc8, 0xea, 0xd8, 0x65, 0x4f, 0xa4, 0xbc, 0xb4, 0xce, 0xcf, 0x6b, 0xf0,
            0x81, 0x17, 0x86, 0x10, 0x95, 0x5a, 0xfd, 0xf8, 0x1a, 0xb0, 0x6e, 0x6a, 0xb0, 0x1d,
            0xb0, 0x8b, 0x3e, 0xa1, 0xa0, 0x44, 0x55, 0x33, 0x69, 0xd1, 0xbb, 0x02, 0x51, 0x2d,
            0xab, 0x9f, 0x79, 0x3d, 0xdb, 0x0b, 0x2e, 0x8f, 0x8f, 0x1e, 0x83, 0x73, 0x86, 0x45,
            0xe4, 0x72, 0x52, 0x5b, 0x0b, 0x14, 0xb1, 0x2a, 0xff, 0xa0, 0xf6, 0xc0, 0xea, 0xb0,
            0x56, 0x14, 0xc9, 0x6f, 0x8d, 0x66, 0x44, 0x5a, 0xb5, 0x38, 0xba, 0x0f, 0x9d, 0x09,
            0xa5, 0x9e, 0xd8, 0x1e, 0x00, 0x6d, 0xa5, 0xd9, 0x75, 0x0e, 0xb8, 0xcf, 0x12, 0x22,
            0xa0, 0xe6, 0xfd, 0x1f, 0x02, 0x97, 0xcc, 0xda, 0x50, 0xa1, 0xa0, 0x2c, 0xa8, 0x03,
            0x78, 0x9d, 0x29, 0xb7, 0xa7, 0xa5, 0x55, 0x33, 0x6b, 0x8f, 0xa5, 0x80, 0x9e, 0xa6,
            0xf8, 0x1f, 0x97, 0x48, 0xed, 0xa0, 0xd2, 0x88, 0x65, 0x35, 0x91, 0x97, 0x3c, 0xb5,
            0x76, 0x01, 0x73, 0x30, 0x46, 0xd2, 0x56, 0x8d, 0x49, 0xaa, 0x29, 0x36, 0xbf, 0x86,
            0x6c, 0x37, 0x5e, 0x0b, 0x27, 0x0c, 0x98, 0x91, 0xcd, 0x12, 0xa0, 0xcc, 0x5a, 0x91,
            0x26, 0xf5, 0x10, 0x1a, 0x7e, 0xb7, 0xd7, 0xd4, 0x32, 0x19, 0x39, 0x80, 0xaa, 0xa2,
            0x42, 0xd0, 0x17, 0x64, 0x4c, 0xd3, 0xe5, 0x2c, 0x56, 0x2d, 0xdb, 0x9d, 0x57, 0x0b,
            0x68, 0xa0, 0x6c, 0x0a, 0xc4, 0x76, 0x9b, 0xc7, 0xfa, 0xd2, 0x23, 0xf5, 0x9f, 0xb4,
            0x85, 0x8c, 0x45, 0x85, 0xa9, 0xfe, 0x35, 0x5d, 0x65, 0xb8, 0xa0, 0x80, 0xe1, 0x7b,
            0xaa, 0x29, 0x11, 0x5d, 0x8f, 0x20, 0xa0, 0x9d, 0x4c, 0x6e, 0x37, 0x00, 0xd0, 0x21,
            0x66, 0xb4, 0x84, 0xb6, 0x90, 0x08, 0x4a, 0xca, 0x04, 0xde, 0x16, 0x88, 0xa6, 0xb5,
            0x2a, 0x3f, 0xc7, 0xc7, 0xd9, 0xf6, 0x13, 0x75, 0x47, 0xcd, 0xdb, 0xa0, 0x51, 0xc1,
            0x79, 0x4b, 0x97, 0xf1, 0x49, 0x0a, 0xfe, 0x3e, 0x04, 0xff, 0xc9, 0x47, 0x2c, 0x49,
            0x6f, 0xb7, 0x98, 0x4f, 0xf3, 0xe3, 0x56, 0xc6, 0xff, 0x3b, 0xf9, 0x95, 0x3c, 0xbf,
            0x4a, 0x39, 0xa0, 0xdd, 0xf1, 0x09, 0x06, 0xfb, 0x66, 0x45, 0x78, 0xe5, 0x8b, 0xdc,
            0x86, 0xa3, 0x1f, 0x84, 0xd2, 0xda, 0xac, 0xd7, 0x12, 0xab, 0x7d, 0xbe, 0x4a, 0x93,
            0xaf, 0x57, 0x33, 0xfc, 0xe2, 0x58, 0x8c, 0xa0, 0xe8, 0xdd, 0xe7, 0x0e, 0xf4, 0x76,
            0x34, 0x88, 0x80, 0xb3, 0x71, 0xda, 0xaa, 0xae, 0xa6, 0xcc, 0x14, 0xa0, 0x72, 0xb3,
            0x54, 0xc7, 0x8c, 0x14, 0xdd, 0x22, 0x3a, 0x94, 0x47, 0xe2, 0xfe, 0x9a, 0xa0, 0x51,
            0xd0, 0xa8, 0xd0, 0x7e, 0x98, 0x8d, 0xa3, 0xd7, 0x5f, 0x99, 0x3d, 0xeb, 0x12, 0xa1,
            0x0d, 0x7f, 0x16, 0x11, 0x51, 0x00, 0x29, 0x11, 0xb2, 0x52, 0x2e, 0x70, 0xd4, 0xab,
            0xae, 0x40, 0x05, 0xa0, 0xb6, 0x2f, 0xd4, 0x3d, 0x5c, 0xd4, 0x42, 0x29, 0xc1, 0x02,
            0xba, 0x61, 0x68, 0x8a, 0x73, 0x50, 0x79, 0xdd, 0xbe, 0xae, 0x36, 0x19, 0xc7, 0x3b,
            0x85, 0x2e, 0x4d, 0xe0, 0x6a, 0x17, 0xc6, 0x45, 0xa0, 0x34, 0xb7, 0x65, 0xe4, 0x01,
            0x0e, 0x6c, 0xa4, 0x50, 0x75, 0xbc, 0x17, 0x62, 0x9d, 0x1a, 0x97, 0xb8, 0xf4, 0x82,
            0x8f, 0xa9, 0x20, 0x54, 0x64, 0x2d, 0x3d, 0x5e, 0x03, 0x5c, 0x28, 0x06, 0x57, 0x80,
        ],
        [
            0xf9, 0x02, 0x11, 0xa0, 0x56, 0xaa, 0xc2, 0x80, 0x10, 0x2f, 0xa7, 0xc4, 0x9f, 0xa6,
            0xba, 0xa3, 0x31, 0xa2, 0x47, 0x45, 0x90, 0x1d, 0x33, 0x24, 0xbb, 0x75, 0x98, 0x1b,
            0x33, 0xf0, 0xb8, 0x53, 0xb6, 0x62, 0xb7, 0x35, 0xa0, 0x77, 0x55, 0xbe, 0xe7, 0x1d,
            0x77, 0x54, 0xca, 0x81, 0x21, 0xc1, 0x5c, 0xff, 0xef, 0x3d, 0xeb, 0xb8, 0xd2, 0x3d,
            0x22, 0xdb, 0x53, 0x14, 0x15, 0xb0, 0xd2, 0x67, 0x09, 0xad, 0x22, 0x2b, 0xcc, 0xa0,
            0xea, 0x48, 0x65, 0x3b, 0x32, 0x09, 0xcc, 0x7b, 0x75, 0x66, 0x7a, 0x15, 0xec, 0xb7,
            0xbd, 0x08, 0xee, 0x55, 0x25, 0x60, 0x01, 0xa6, 0xfa, 0xa6, 0x2d, 0x4b, 0xeb, 0x23,
            0x54, 0x7a, 0xdf, 0x56, 0xa0, 0xe8, 0xaf, 0x8c, 0xbe, 0x69, 0x16, 0x05, 0xd9, 0x50,
            0x9b, 0xce, 0x5f, 0x95, 0xe9, 0x9f, 0x1a, 0x98, 0xef, 0xd3, 0xe7, 0x14, 0x41, 0xa0,
            0x95, 0xd2, 0x83, 0xbd, 0x85, 0x5c, 0xb8, 0x3e, 0x04, 0xa0, 0x6d, 0x22, 0x70, 0x5c,
            0xa5, 0x7c, 0x20, 0xb0, 0x72, 0x18, 0xd9, 0x3b, 0xcb, 0xfc, 0xcb, 0xc7, 0x13, 0xd5,
            0x93, 0x82, 0xb0, 0xf6, 0x0b, 0xb2, 0x9b, 0x3b, 0xd4, 0x57, 0x2f, 0x9b, 0x1c, 0x2e,
            0xa0, 0xc1, 0xfa, 0x7f, 0x64, 0xa7, 0x0c, 0x00, 0x9a, 0x5b, 0x4f, 0x05, 0xfd, 0x72,
            0x18, 0xe5, 0xc3, 0x89, 0x8d, 0x9c, 0x54, 0xb5, 0x3d, 0x3e, 0xbb, 0xfa, 0x96, 0x59,
            0xe1, 0x0e, 0x6b, 0x10, 0x5f, 0xa0, 0xef, 0x50, 0xe1, 0xbf, 0x33, 0xc0, 0xaa, 0x29,
            0x7a, 0x52, 0x9d, 0xe8, 0xd2, 0x0c, 0xb0, 0xee, 0x00, 0x12, 0x1e, 0x9a, 0x74, 0xdd,
            0x94, 0x46, 0xfe, 0xe5, 0xd8, 0xe9, 0xb5, 0xb8, 0x1e, 0x46, 0xa0, 0x57, 0xa6, 0x13,
            0xff, 0x1d, 0x2d, 0xaf, 0x80, 0x34, 0x36, 0x01, 0xa8, 0xb4, 0x26, 0x5d, 0x4a, 0x69,
            0x4c, 0x8c, 0x78, 0x7e, 0x91, 0x71, 0x73, 0xa4, 0x9c, 0x5a, 0x11, 0xc5, 0x8b, 0xda,
            0x8e, 0xa0, 0xb1, 0xc0, 0x8e, 0xb9, 0x55, 0x73, 0xab, 0x5e, 0x5f, 0xa8, 0xdd, 0xb5,
            0xf7, 0xf3, 0x7d, 0x7d, 0x8a, 0xab, 0xcc, 0x0c, 0x74, 0x80, 0x15, 0x84, 0x64, 0xe0,
            0x34, 0xcf, 0x86, 0x9d, 0xf5, 0xb8, 0xa0, 0x3e, 0xed, 0x8a, 0xd1, 0x04, 0xde, 0x9b,
            0xca, 0x13, 0x28, 0xc9, 0x22, 0xdd, 0x8b, 0x3a, 0x94, 0x82, 0x56, 0xe1, 0x7a, 0xc9,
            0x40, 0x8c, 0x90, 0x65, 0xc5, 0xb1, 0xb2, 0xc2, 0x1c, 0x88, 0xdb, 0xa0, 0xd3, 0x69,
            0x3d, 0xe8, 0x7b, 0xbe, 0x22, 0x58, 0xc1, 0x52, 0xb4, 0x93, 0x53, 0x71, 0x12, 0xf9,
            0xf8, 0x2d, 0xac, 0x64, 0x50, 0x36, 0xfe, 0xe3, 0x17, 0x8c, 0x67, 0x66, 0xc7, 0xf9,
            0x37, 0xf3, 0xa0, 0x40, 0xeb, 0x93, 0xf5, 0x01, 0x70, 0x4a, 0xb5, 0xce, 0x0c, 0x7c,
            0x51, 0x84, 0x6e, 0xee, 0x54, 0xf9, 0x28, 0xfd, 0x8b, 0xe1, 0x90, 0x3e, 0x65, 0xa0,
            0x95, 0x64, 0x10, 0x76, 0xc8, 0xa4, 0x47, 0xa0, 0x50, 0x73, 0xa4, 0xe9, 0x3d, 0x9a,
            0x55, 0xe4, 0x7f, 0xb2, 0x02, 0x63, 0x79, 0x99, 0x54, 0x22, 0xcd, 0xcb, 0xc7, 0x35,
            0x8a, 0xa4, 0xf9, 0x6f, 0xce, 0x90, 0x5d, 0x3c, 0x48, 0xda, 0x50, 0xfe, 0xa0, 0x2f,
            0x3e, 0x7e, 0x72, 0xc8, 0x10, 0x8a, 0x29, 0xf3, 0x83, 0x65, 0x51, 0x66, 0xfb, 0x42,
            0x3a, 0xd8, 0x2e, 0xf3, 0x35, 0x21, 0x87, 0x6d, 0x18, 0xbd, 0x3d, 0x96, 0x35, 0x27,
            0x00, 0xd4, 0x70, 0xa0, 0x10, 0x6d, 0x69, 0xfe, 0xa8, 0xfa, 0x71, 0x69, 0x0d, 0xaf,
            0xea, 0xd4, 0x34, 0xac, 0x06, 0xad, 0xe2, 0xcd, 0xd5, 0xd8, 0x69, 0x87, 0x62, 0x55,
            0x0d, 0x3c, 0x4f, 0x7b, 0x90, 0x63, 0xd5, 0x9b, 0xa0, 0x28, 0xb7, 0xcd, 0x5c, 0x70,
            0xa5, 0xda, 0x11, 0xce, 0x79, 0xda, 0x74, 0x2e, 0x79, 0xb9, 0xf0, 0xf1, 0x02, 0xa2,
            0x1d, 0x7a, 0xdf, 0x31, 0xb2, 0xb2, 0x9b, 0x9c, 0xf1, 0x46, 0xfd, 0x42, 0x92, 0x80,
        ],
        [
            0xf9, 0x02, 0x11, 0xa0, 0x80, 0xf6, 0x43, 0xcf, 0xf4, 0x69, 0xbd, 0x2b, 0x75, 0xd7,
            0x46, 0xad, 0xa3, 0xf5, 0xcf, 0x1b, 0xac, 0xcf, 0xb8, 0xee, 0x12, 0x23, 0x09, 0x49,
            0x07, 0xbb, 0x0e, 0x60, 0x92, 0x78, 0x8e, 0x4d, 0xa0, 0xdf, 0x6e, 0x72, 0xce, 0x27,
            0x0e, 0x9e, 0x54, 0x65, 0x27, 0x85, 0x66, 0x62, 0xb5, 0x45, 0xab, 0x70, 0x6f, 0xfd,
            0x42, 0xda, 0x99, 0xd2, 0xb3, 0x66, 0x76, 0xd7, 0xe3, 0x5f, 0xc0, 0x6f, 0xcf, 0xa0,
            0x47, 0x17, 0xa5, 0xde, 0xff, 0xfb, 0xc5, 0x9a, 0xbd, 0x1e, 0x38, 0x38, 0x3c, 0xf8,
            0x65, 0x59, 0x06, 0xe2, 0xae, 0x68, 0xb7, 0x70, 0x5d, 0xe8, 0x11, 0xe3, 0x2e, 0x2d,
            0x98, 0x53, 0xd3, 0x65, 0xa0, 0xa2, 0x48, 0x0f, 0x7c, 0xdd, 0xe0, 0x4a, 0x37, 0x2a,
            0xcb, 0xe2, 0x34, 0x36, 0xac, 0xaf, 0x82, 0x99, 0xcf, 0x1d, 0xbc, 0xbe, 0xf8, 0xba,
            0x5b, 0x42, 0xf8, 0x7a, 0xc1, 0x27, 0xe6, 0x55, 0x5c, 0xa0, 0x29, 0x0e, 0xda, 0x5f,
            0xc1, 0x9f, 0xca, 0x90, 0xd3, 0x06, 0x3b, 0xa9, 0x6b, 0x5e, 0x13, 0xb2, 0x3f, 0x28,
            0x6d, 0x57, 0xed, 0x91, 0xd0, 0x80, 0xb9, 0xca, 0xe1, 0xc8, 0xe4, 0x5c, 0xaf, 0xd6,
            0xa0, 0x02, 0x34, 0x35, 0x35, 0xf7, 0x0f, 0x41, 0x5e, 0x3d, 0x9c, 0x16, 0xfd, 0xff,
            0xa1, 0x36, 0x3b, 0xd0, 0x79, 0xf0, 0x2b, 0x51, 0xb3, 0x88, 0x18, 0x54, 0xff, 0x17,
            0xdb, 0xfe, 0x55, 0x23, 0xf9, 0xa0, 0x8f, 0x9a, 0x23, 0xbb, 0x74, 0xd0, 0xb7, 0x65,
            0x35, 0xdb, 0x37, 0x24, 0x30, 0x6d, 0x29, 0xbc, 0xf5, 0xbb, 0x07, 0x05, 0x97, 0x70,
            0x22, 0x32, 0x26, 0x18, 0x93, 0x39, 0x7b, 0x4f, 0x7a, 0x1e, 0xa0, 0xa7, 0xa4, 0x24,
            0x74, 0x9f, 0x95, 0xe8, 0x1c, 0x6b, 0x71, 0xe7, 0x7b, 0x6c, 0xb3, 0xe6, 0x18, 0x3e,
            0x40, 0x6d, 0x9c, 0x9b, 0x0f, 0xef, 0x45, 0xce, 0x57, 0x46, 0xaa, 0xce, 0x10, 0xf3,
            0x1f, 0xa0, 0xd1, 0xcd, 0x19, 0x02, 0x5c, 0xb7, 0x8a, 0xba, 0x94, 0x67, 0x07, 0xea,
            0x7a, 0x3d, 0x36, 0x3c, 0xc2, 0xd6, 0xf9, 0x1a, 0x72, 0xe6, 0xf3, 0xa0, 0x5b, 0x42,
            0x53, 0x4d, 0x6f, 0x4d, 0x11, 0x2f, 0xa0, 0xdf, 0x25, 0x21, 0x36, 0x74, 0x9f, 0x9e,
            0xa9, 0x0e, 0xef, 0x15, 0x51, 0x88, 0x28, 0x40, 0xf5, 0xd1, 0x2e, 0xf4, 0xa8, 0x3c,
            0x5c, 0xfe, 0x81, 0x70, 0x17, 0x91, 0xef, 0xdf, 0xe6, 0xec, 0xcb, 0xa0, 0x19, 0xc0,
            0xb8, 0x68, 0x06, 0xb1, 0x03, 0xaa, 0x9d, 0xed, 0xb0, 0xa4, 0x70, 0xdd, 0xac, 0xc9,
            0xd1, 0x11, 0x90, 0x75, 0x58, 0xed, 0x79, 0x6c, 0x58, 0x05, 0x21, 0x14, 0x03, 0x47,
            0xc8, 0x99, 0xa0, 0x7b, 0x21, 0x30, 0x45, 0x04, 0x78, 0xfd, 0x6b, 0xf8, 0x25, 0x42,
            0x44, 0x3f, 0x64, 0xf1, 0x57, 0xde, 0xa6, 0x43, 0x69, 0xd8, 0xd9, 0xc1, 0xfc, 0x3c,
            0xe6, 0x80, 0xd9, 0x27, 0xd7, 0x1b, 0x14, 0xa0, 0xa7, 0x88, 0xdf, 0xcc, 0x27, 0x7b,
            0xc6, 0xbf, 0x15, 0x5f, 0xeb, 0xff, 0xa7, 0x18, 0xda, 0x71, 0x95, 0xd0, 0x64, 0x2e,
            0xb8, 0x4e, 0x38, 0x34, 0xc5, 0xfb, 0x33, 0x99, 0x47, 0xb5, 0x3b, 0xb2, 0xa0, 0x19,
            0x38, 0xd2, 0xff, 0x88, 0xfa, 0xb0, 0x07, 0x8c, 0xd1, 0xff, 0x34, 0x53, 0xbe, 0xae,
            0x3f, 0x4d, 0x31, 0xc3, 0x45, 0x36, 0xc4, 0xff, 0xc3, 0xba, 0x26, 0xcf, 0x57, 0xd4,
            0x19, 0xdf, 0xfc, 0xa0, 0xb7, 0xe7, 0x38, 0x57, 0x54, 0x28, 0x34, 0x0c, 0x8a, 0xc7,
            0xe0, 0x65, 0x9c, 0xca, 0x51, 0x85, 0x57, 0x98, 0x17, 0xa0, 0x45, 0xdf, 0x0d, 0x9d,
            0x31, 0x24, 0x2d, 0xba, 0x7a, 0xac, 0x08, 0x17, 0xa0, 0x82, 0x20, 0x4e, 0xa9, 0x74,
            0x64, 0x16, 0xe4, 0xa3, 0x56, 0x4f, 0xde, 0x12, 0x3d, 0x60, 0x9c, 0x17, 0x43, 0x48,
            0x19, 0xfc, 0x7f, 0x47, 0x29, 0xde, 0x45, 0x9f, 0xd4, 0x5f, 0xe5, 0x87, 0x83, 0x80,
        ],
        [
            0xf9, 0x01, 0xb1, 0x80, 0xa0, 0x8e, 0x38, 0xfd, 0x86, 0xe5, 0x4b, 0x8a, 0x12, 0x43,
            0x58, 0x9a, 0x22, 0x9d, 0xb7, 0xcf, 0x04, 0x9c, 0x18, 0xa4, 0xb8, 0xff, 0xb8, 0x27,
            0xf6, 0x80, 0x36, 0xfa, 0xef, 0x88, 0xae, 0xcd, 0x9a, 0xa0, 0xa5, 0x55, 0x23, 0xc6,
            0xfc, 0x4b, 0xc1, 0xf7, 0x46, 0xd9, 0xec, 0x50, 0x7f, 0xf4, 0xdf, 0x46, 0x0f, 0xb3,
            0x58, 0xf9, 0x7f, 0x66, 0xbd, 0x06, 0x11, 0xf0, 0xf2, 0xa6, 0xff, 0x28, 0x23, 0xa9,
            0x80, 0xa0, 0xb5, 0xc8, 0xe0, 0x56, 0x7f, 0xe1, 0x4c, 0x0d, 0x96, 0x0a, 0x32, 0x31,
            0xb8, 0x9f, 0x5a, 0xb9, 0x79, 0x73, 0xc9, 0xdc, 0x83, 0xc7, 0x12, 0x6b, 0x2a, 0x39,
            0xfb, 0xf1, 0xac, 0xa8, 0xb2, 0xb2, 0x80, 0xa0, 0x55, 0x09, 0x98, 0x12, 0xe4, 0x20,
            0xce, 0x25, 0x48, 0x3f, 0xc4, 0x75, 0x50, 0x3b, 0x0f, 0xcb, 0x6d, 0x7f, 0x8c, 0x78,
            0x5e, 0xb0, 0x02, 0x9e, 0xeb, 0x78, 0xc1, 0x4c, 0x1c, 0x71, 0x51, 0xcc, 0xa0, 0x68,
            0x2a, 0x76, 0x86, 0xa1, 0xcf, 0x94, 0xe8, 0xef, 0x0c, 0xc0, 0x13, 0xef, 0x43, 0x93,
            0xf7, 0x42, 0xa9, 0x0a, 0x10, 0xa8, 0xcc, 0xad, 0xcc, 0x96, 0xc5, 0x4f, 0xfd, 0x10,
            0x05, 0x05, 0x7b, 0xa0, 0x98, 0xa9, 0x2b, 0xe0, 0x12, 0xe2, 0x1f, 0x6c, 0x29, 0xf5,
            0xc9, 0x51, 0xc8, 0x48, 0x42, 0x4b, 0x99, 0xf8, 0xca, 0x97, 0x86, 0xca, 0xef, 0x4c,
            0xc2, 0x19, 0x2e, 0x51, 0x47, 0x23, 0x5d, 0x60, 0xa0, 0x39, 0xc3, 0x38, 0x6e, 0xf5,
            0xed, 0xb0, 0x5b, 0x00, 0x8e, 0xb2, 0x57, 0xde, 0xd4, 0x67, 0x7f, 0x5e, 0x0a, 0x39,
            0xc9, 0xea, 0x99, 0x2b, 0x64, 0x7e, 0x43, 0x4e, 0x67, 0x1c, 0xa2, 0x33, 0x63, 0xa0,
            0xbb, 0x9f, 0x27, 0xc7, 0xe7, 0x7a, 0x3b, 0xed, 0x91, 0x7d, 0x82, 0x6e, 0x14, 0xcb,
            0x9e, 0x7f, 0x48, 0x18, 0x1e, 0xe0, 0x14, 0x39, 0x02, 0xb9, 0x4c, 0x92, 0xd8, 0x64,
            0xcc, 0x5c, 0xfc, 0xf1, 0xa0, 0x2c, 0x46, 0xa9, 0xd4, 0x7e, 0x7e, 0x8c, 0x6a, 0x37,
            0x4c, 0x01, 0x5a, 0x1a, 0x5f, 0x50, 0x21, 0x10, 0x52, 0x77, 0xeb, 0x52, 0xec, 0x74,
            0x2a, 0xa4, 0x64, 0x87, 0x50, 0xb4, 0x07, 0x7d, 0xd5, 0xa0, 0x55, 0x8b, 0x7a, 0xe0,
            0xa4, 0x3f, 0x3f, 0xdd, 0x17, 0xbb, 0x30, 0xa5, 0xfa, 0x1b, 0x7d, 0x70, 0x11, 0x15,
            0xeb, 0x8b, 0x0b, 0x7f, 0xc7, 0xd4, 0x78, 0xad, 0x98, 0xe7, 0x51, 0xf7, 0xe7, 0x01,
            0xa0, 0x06, 0xb4, 0x34, 0x68, 0x33, 0x9a, 0xdc, 0xfe, 0xb6, 0xc1, 0x2d, 0xbd, 0x6e,
            0xa3, 0x3b, 0xa9, 0xc4, 0xd7, 0xad, 0x97, 0x68, 0x3c, 0x6a, 0x53, 0x39, 0x4b, 0x3f,
            0x40, 0x6d, 0x06, 0xb6, 0x48, 0xa0, 0xa9, 0x51, 0x44, 0xcc, 0x87, 0x7d, 0xc0, 0x04,
            0xd3, 0x6b, 0x36, 0x48, 0x9a, 0x91, 0xa6, 0x21, 0xf0, 0xeb, 0xe6, 0x3b, 0x36, 0x33,
            0x1c, 0xd5, 0x36, 0xfb, 0x7a, 0x40, 0x86, 0x96, 0xb3, 0xd1, 0xa0, 0x59, 0x9d, 0xaa,
            0xca, 0x7c, 0x1a, 0x10, 0xbd, 0x9f, 0x12, 0xe0, 0x5a, 0x57, 0xff, 0x66, 0x16, 0xbb,
            0x5a, 0xc4, 0x00, 0x89, 0x9c, 0x4c, 0xa4, 0x69, 0xa8, 0xd2, 0x07, 0x44, 0x79, 0xa3,
            0x2e, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ],
        [
            0xe2, 0x12, 0xa0, 0xcd, 0xb7, 0x93, 0xcf, 0xa4, 0x0f, 0x9d, 0x96, 0x3c, 0x88, 0xd9,
            0xf9, 0x67, 0x50, 0x30, 0x13, 0xdf, 0xe9, 0xad, 0x93, 0x33, 0x38, 0xd6, 0xe6, 0x64,
            0x89, 0x17, 0xc4, 0xc7, 0x8f, 0x16, 0x4a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ],
        [
            0xf8, 0x71, 0x80, 0x80, 0x80, 0xa0, 0xdc, 0xc7, 0x71, 0xae, 0x6a, 0x42, 0x35, 0xd3,
            0x33, 0x9b, 0xbb, 0xf2, 0x04, 0xf6, 0x2e, 0x34, 0x09, 0x72, 0x08, 0xb4, 0x0d, 0x4b,
            0x02, 0xdc, 0xfb, 0x91, 0x08, 0x00, 0x16, 0x47, 0xdd, 0x60, 0x80, 0x80, 0x80, 0xa0,
            0xbc, 0x90, 0x80, 0x25, 0x16, 0xd2, 0x72, 0xd0, 0xb6, 0x1a, 0xf7, 0x2f, 0xb9, 0xb2,
            0x02, 0xf1, 0x19, 0xbd, 0xdd, 0x1b, 0x52, 0x4b, 0x3d, 0x3f, 0xa1, 0xbf, 0x4a, 0x13,
            0x82, 0xaf, 0xcb, 0x53, 0x80, 0x80, 0x80, 0x80, 0x80, 0xa0, 0xfd, 0x92, 0x65, 0xd7,
            0x1e, 0x60, 0x5a, 0x77, 0x8d, 0x0d, 0x80, 0x23, 0x4e, 0x4b, 0xaa, 0xf4, 0x17, 0x01,
            0x60, 0xf1, 0x4c, 0xd1, 0x19, 0xd2, 0x2d, 0x53, 0xd3, 0x34, 0xed, 0xb9, 0x88, 0xaf,
            0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ],
        [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ],
    ];
    let storage_leaf = [
        0xeb, 0x9e, 0x20, 0x2d, 0x80, 0x77, 0x15, 0x55, 0x8b, 0x0e, 0x74, 0x16, 0x55, 0x33, 0x9a,
        0x57, 0x47, 0xd4, 0xc8, 0x73, 0xa2, 0x36, 0xe6, 0x52, 0xb0, 0x2c, 0xf1, 0x7d, 0xfa, 0x2a,
        0xe4, 0xc2, 0x8b, 0x8a, 0x01, 0x0f, 0x0c, 0xf0, 0x64, 0xdd, 0x59, 0x20, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    ];
    let storage_depth = 7;

    let value = get_storage_value(storage_value);

    verify(
        key,
        value,
        storage_hash,
        storage_nodes,
        storage_leaf,
        storage_depth,
    );
}

#[test]
fn test_leaf() {
    let key = [
        0xd2, 0xfd, 0xbe, 0x6a, 0xe5, 0x06, 0x6a, 0x91, 0x19, 0x14, 0xd5, 0xf5, 0x45, 0x84, 0xaf,
        0xbb, 0xf8, 0xbe, 0x02, 0x1c, 0x12, 0x4f, 0x4c, 0xe7, 0x0d, 0xf1, 0xae, 0x5a, 0xf2, 0x2d,
        0x0a, 0xf5,
    ];
    let storage_value = 0x21e19e0c9bab2400000;
    let storage_hash = [
        0x58, 0x64, 0xda, 0x37, 0xf3, 0xad, 0xb7, 0x02, 0x97, 0x46, 0x48, 0x59, 0x12, 0xd3, 0x83,
        0x8a, 0x09, 0x9b, 0x77, 0x85, 0x24, 0x5f, 0x5d, 0x1c, 0xba, 0xd2, 0x48, 0x3c, 0x77, 0xe5,
        0xb9, 0xb8,
    ];
    let storage_nodes = [
        [
            0xf9, 0x02, 0x11, 0xa0, 0xf1, 0x5a, 0xd0, 0x08, 0x86, 0xfb, 0x23, 0x2f, 0x6b, 0x11,
            0xf6, 0xb5, 0xc8, 0xa5, 0x24, 0xcc, 0xf6, 0x0d, 0xb1, 0xf2, 0xb9, 0xb6, 0x24, 0x23,
            0x8c, 0x69, 0x9d, 0xba, 0x5b, 0xff, 0x32, 0xcc, 0xa0, 0x63, 0xd9, 0xe6, 0xfd, 0xca,
            0x9a, 0x48, 0xca, 0xed, 0x0e, 0xd1, 0x33, 0x79, 0x86, 0x4b, 0x0b, 0xe3, 0xa1, 0xdc,
            0xc4, 0xf2, 0xfe, 0x70, 0x16, 0x53, 0x7e, 0xc7, 0xfa, 0x04, 0x9f, 0x63, 0x39, 0xa0,
            0xef, 0xba, 0x20, 0xf2, 0x22, 0x10, 0x0b, 0xe4, 0x0c, 0xcd, 0x76, 0x78, 0x95, 0x09,
            0x1f, 0x45, 0x74, 0x71, 0xa8, 0xa5, 0x3c, 0x8d, 0x11, 0x8d, 0xb3, 0x1c, 0x2b, 0xf8,
            0xec, 0x90, 0x61, 0x44, 0xa0, 0xe3, 0xb7, 0xc4, 0x1e, 0xd7, 0xc4, 0xe1, 0x68, 0x0f,
            0x0e, 0xb3, 0xf5, 0x59, 0xec, 0x92, 0xec, 0x46, 0x93, 0x50, 0xda, 0x10, 0x8e, 0x52,
            0x59, 0xc6, 0xcc, 0x96, 0x1b, 0x8c, 0x61, 0x3c, 0x0b, 0xa0, 0x67, 0xa5, 0x6b, 0xed,
            0xe6, 0x90, 0x17, 0xc7, 0x79, 0xdd, 0x2e, 0xb2, 0xdd, 0xa8, 0x50, 0xeb, 0x94, 0xf1,
            0x59, 0x3b, 0xdb, 0x6f, 0xf8, 0xad, 0xa0, 0x8a, 0x1c, 0x71, 0x30, 0xea, 0x22, 0x42,
            0xa0, 0xa4, 0xff, 0x62, 0xc8, 0xdf, 0x54, 0x1a, 0xd6, 0x7a, 0xb8, 0x1c, 0x75, 0x92,
            0x1c, 0x9f, 0x66, 0x09, 0xba, 0xe3, 0xcf, 0x37, 0xe0, 0x8e, 0x74, 0x6f, 0x88, 0x7a,
            0xb3, 0xee, 0xa9, 0x9d, 0xee, 0xa0, 0x83, 0xd6, 0xaa, 0x68, 0xf3, 0xac, 0xf1, 0x61,
            0xd6, 0x0e, 0x88, 0xb2, 0x3a, 0xbd, 0x71, 0xf2, 0xcd, 0xd8, 0x9c, 0xfe, 0x3f, 0x3c,
            0xfa, 0x56, 0x89, 0x1a, 0xec, 0xac, 0x46, 0xbb, 0xb2, 0x60, 0xa0, 0xde, 0xd9, 0x98,
            0xb3, 0x81, 0x6f, 0x64, 0x82, 0x92, 0x9a, 0x7c, 0xc5, 0x04, 0x3e, 0xd5, 0x2e, 0x74,
            0x66, 0x74, 0x2a, 0x40, 0x51, 0x33, 0xe8, 0xfd, 0x79, 0x73, 0x8e, 0x58, 0x5a, 0x2b,
            0x41, 0xa0, 0x63, 0x13, 0x0b, 0x03, 0x90, 0x69, 0x73, 0xfe, 0x54, 0x90, 0x75, 0xe7,
            0x6a, 0x82, 0xc2, 0x42, 0x3c, 0xb5, 0x74, 0x6c, 0x45, 0x32, 0x73, 0x21, 0x89, 0xfb,
            0x28, 0xd4, 0x95, 0x46, 0xee, 0x3f, 0xa0, 0xe7, 0xe6, 0x52, 0x90, 0x39, 0x1d, 0x0f,
            0x30, 0xe9, 0x26, 0xdb, 0x82, 0xe3, 0x45, 0xde, 0x5d, 0x3b, 0x6f, 0x29, 0x31, 0xc3,
            0xf4, 0xa2, 0x39, 0xf7, 0xf8, 0x1f, 0x7f, 0xd2, 0x0e, 0xc6, 0xea, 0xa0, 0xfd, 0x16,
            0xa9, 0xf5, 0x98, 0xdd, 0xaa, 0x32, 0x9b, 0x54, 0x4d, 0xcd, 0xac, 0xc1, 0xd8, 0x2e,
            0x6e, 0x20, 0x72, 0xb5, 0x7f, 0x2a, 0x98, 0x4b, 0x6d, 0x7f, 0xb9, 0x95, 0x23, 0xff,
            0x04, 0xc1, 0xa0, 0x4a, 0x5d, 0x73, 0x80, 0x6d, 0x25, 0x33, 0x4e, 0xfe, 0x03, 0x4a,
            0x2a, 0xd7, 0x2b, 0xf2, 0x5e, 0xcb, 0xe1, 0x09, 0x78, 0x2c, 0xdb, 0x7d, 0xe9, 0xd0,
            0x63, 0x2a, 0x74, 0x3e, 0xfd, 0xa4, 0x95, 0xa0, 0x13, 0xdd, 0x76, 0x35, 0xba, 0xde,
            0x3b, 0xa5, 0x44, 0x85, 0x03, 0x6e, 0xc9, 0x71, 0xa5, 0x57, 0x95, 0xb3, 0xb4, 0x41,
            0x1a, 0x27, 0x21, 0xab, 0x45, 0x70, 0x45, 0xb5, 0x83, 0x3b, 0x51, 0xf9, 0xa0, 0x93,
            0x36, 0x91, 0xaa, 0x79, 0xa7, 0x11, 0x09, 0x04, 0xb7, 0x0c, 0x58, 0x77, 0xa7, 0x85,
            0x60, 0x8e, 0x8c, 0x67, 0x10, 0x96, 0x43, 0x50, 0x68, 0x76, 0xe0, 0x0a, 0xdd, 0x49,
            0xc1, 0x40, 0x4e, 0xa0, 0x98, 0xe5, 0x9b, 0xae, 0x17, 0xea, 0xa4, 0x8b, 0x0e, 0xcb,
            0xc5, 0xb0, 0xb5, 0x61, 0x5e, 0x87, 0xb2, 0x8a, 0x8b, 0x20, 0x31, 0x03, 0x01, 0xb6,
            0xf6, 0x58, 0x8a, 0xfb, 0xcc, 0x88, 0x65, 0x20, 0xa0, 0xb5, 0x20, 0xca, 0xf5, 0x70,
            0x91, 0xaa, 0x1a, 0xf0, 0x88, 0xb8, 0xea, 0xa1, 0xa9, 0x22, 0x1f, 0x50, 0x2d, 0x6e,
            0xe7, 0x21, 0x9e, 0x16, 0xf2, 0xe6, 0xed, 0x27, 0x67, 0x16, 0x8b, 0x73, 0x04, 0x80,
        ],
        [
            0xf9, 0x02, 0x11, 0xa0, 0xb9, 0xb6, 0x8f, 0xef, 0x90, 0x9e, 0xaa, 0x5d, 0x59, 0xc3,
            0xcb, 0x3c, 0xab, 0x0e, 0xdc, 0x57, 0xc5, 0x09, 0x5c, 0x9e, 0x3e, 0xa5, 0xea, 0x0a,
            0x94, 0xbb, 0x15, 0x08, 0x31, 0x25, 0xf6, 0xf0, 0xa0, 0x2c, 0x33, 0xf1, 0x64, 0xbd,
            0x72, 0xa7, 0x7b, 0xf5, 0x33, 0x6d, 0xac, 0x20, 0xb3, 0x97, 0x55, 0xd9, 0xb8, 0xfa,
            0x28, 0xa8, 0x9e, 0x17, 0x54, 0xe4, 0x03, 0x08, 0xbc, 0x11, 0xdf, 0x85, 0x2b, 0xa0,
            0x9f, 0x66, 0xbe, 0x57, 0x14, 0x9b, 0xe3, 0xdf, 0x58, 0x8c, 0x4d, 0x17, 0x4a, 0xdd,
            0x3b, 0x3a, 0x57, 0xc7, 0x73, 0x47, 0x47, 0xd4, 0x3d, 0x6d, 0x4d, 0xb9, 0xef, 0xc4,
            0x73, 0x43, 0x0b, 0x79, 0xa0, 0xb6, 0x58, 0xb9, 0x08, 0xcf, 0xc5, 0x45, 0x50, 0xa7,
            0xe6, 0x67, 0x43, 0x47, 0x2e, 0x6d, 0xfa, 0xa1, 0xc9, 0x76, 0x40, 0xb0, 0xff, 0x03,
            0xc1, 0xed, 0x89, 0xce, 0x0e, 0xdd, 0xe1, 0x03, 0x12, 0xa0, 0x6b, 0x57, 0xb7, 0xcb,
            0x38, 0x72, 0xc3, 0xe9, 0x57, 0x00, 0xce, 0x78, 0x6e, 0xe4, 0xa4, 0xff, 0x04, 0xf4,
            0x26, 0xc3, 0x4b, 0xa6, 0x1f, 0x6b, 0x89, 0xec, 0xa8, 0x0d, 0x86, 0xed, 0xd0, 0x79,
            0xa0, 0x0f, 0xe0, 0x3e, 0xff, 0x73, 0x27, 0x00, 0xb8, 0xe9, 0xd7, 0x36, 0xcc, 0x39,
            0x11, 0xf1, 0xd4, 0xb2, 0x38, 0xd9, 0x1e, 0x9b, 0xde, 0xf9, 0xda, 0x40, 0x0d, 0x7f,
            0xb7, 0x89, 0x22, 0x22, 0xa7, 0xa0, 0x11, 0xb1, 0x06, 0xe0, 0x5e, 0x31, 0xe1, 0xe0,
            0x76, 0x72, 0xb5, 0x77, 0x99, 0xd1, 0x09, 0x77, 0x36, 0x6b, 0x12, 0x2b, 0xb5, 0x0e,
            0xdf, 0x67, 0xf0, 0x8b, 0x80, 0x31, 0x1e, 0xc3, 0x29, 0x10, 0xa0, 0xa9, 0x7c, 0x62,
            0x6e, 0x36, 0x00, 0x1e, 0xc4, 0x22, 0x34, 0xa5, 0x6e, 0x19, 0xec, 0xc7, 0xd3, 0x37,
            0xa9, 0xae, 0x4c, 0x00, 0x8b, 0x98, 0x33, 0x53, 0x11, 0xc5, 0x5b, 0x39, 0x5a, 0x2a,
            0xe5, 0xa0, 0x7e, 0x8a, 0x86, 0xa9, 0x0e, 0xc1, 0x07, 0x6a, 0x57, 0x19, 0x3d, 0x7c,
            0x9a, 0xa0, 0xbf, 0x80, 0xc1, 0xe2, 0x05, 0x17, 0x50, 0xc8, 0x48, 0xea, 0x50, 0x66,
            0x0d, 0x79, 0x34, 0x2c, 0x67, 0xe4, 0xa0, 0xf1, 0x21, 0x79, 0x33, 0xd5, 0x6b, 0x14,
            0x38, 0x48, 0xde, 0x26, 0x18, 0xdd, 0x68, 0xef, 0x11, 0x23, 0xd2, 0x62, 0xe5, 0x74,
            0x2c, 0x5d, 0xcb, 0x68, 0x16, 0x92, 0x07, 0x43, 0xd6, 0x5b, 0xf6, 0xa0, 0xe9, 0x96,
            0x52, 0xb6, 0x9e, 0x6b, 0xec, 0x28, 0x1a, 0x07, 0x98, 0xc2, 0x0d, 0xa1, 0xff, 0x96,
            0x5d, 0x4f, 0x01, 0xca, 0xee, 0x4c, 0x36, 0xe8, 0x60, 0x07, 0xb9, 0xe4, 0x70, 0x75,
            0x23, 0x0e, 0xa0, 0xa3, 0xde, 0x3f, 0x3f, 0xf2, 0x9f, 0x66, 0xa7, 0x53, 0x9a, 0x83,
            0x67, 0x03, 0xf5, 0x9e, 0x7b, 0xce, 0x95, 0x6d, 0xb6, 0xd5, 0xeb, 0x39, 0xab, 0x81,
            0x3b, 0x29, 0x36, 0x17, 0x8b, 0x7f, 0xec, 0xa0, 0x31, 0x29, 0x7a, 0x2d, 0x0e, 0xd1,
            0x01, 0xa2, 0x93, 0x0e, 0xaf, 0x42, 0xcb, 0x52, 0x08, 0xc5, 0x5b, 0xc3, 0x73, 0x85,
            0x59, 0x3d, 0x5a, 0x61, 0x93, 0xa0, 0x6f, 0x4f, 0xc4, 0x24, 0x9b, 0x84, 0xa0, 0x5a,
            0xbc, 0xae, 0x9d, 0x6b, 0x73, 0xe0, 0xef, 0xce, 0x56, 0x28, 0xae, 0x7f, 0x5b, 0xae,
            0x4b, 0x8c, 0xcb, 0x19, 0x0d, 0x5c, 0x53, 0xaf, 0x27, 0x1b, 0x57, 0xb1, 0xf2, 0x24,
            0x71, 0x90, 0x91, 0xa0, 0xfb, 0xdd, 0xb3, 0x36, 0xc8, 0x44, 0x27, 0x69, 0x94, 0xe8,
            0xe6, 0xaf, 0x33, 0x1c, 0x03, 0x3a, 0xbe, 0x34, 0xab, 0x01, 0x91, 0x21, 0x32, 0x00,
            0x52, 0x21, 0xd1, 0x28, 0x17, 0x01, 0x15, 0x29, 0xa0, 0xa0, 0x0b, 0x4a, 0xea, 0x6d,
            0xeb, 0x95, 0x8d, 0x37, 0xf1, 0x65, 0xfa, 0xac, 0x08, 0x02, 0xc5, 0x77, 0x93, 0x9d,
            0x0a, 0x8c, 0xa8, 0x9c, 0x82, 0xfc, 0x81, 0x53, 0x3c, 0x91, 0x34, 0xce, 0xd5, 0x80,
        ],
        [
            0xf9, 0x02, 0x11, 0xa0, 0x76, 0xdd, 0x54, 0xee, 0xe6, 0x47, 0x07, 0x44, 0x83, 0xdb,
            0xf1, 0x5b, 0x4d, 0xb5, 0xd4, 0xdf, 0xab, 0xd4, 0x7f, 0x43, 0xc9, 0x1a, 0xa0, 0x5d,
            0xcd, 0x52, 0x8e, 0x4c, 0x98, 0xee, 0xbb, 0xd8, 0xa0, 0x16, 0xf1, 0xc0, 0x38, 0x60,
            0xc2, 0xdd, 0xb0, 0x21, 0xe6, 0x28, 0x22, 0x29, 0x56, 0x14, 0xd0, 0x51, 0xc1, 0x80,
            0x30, 0x7c, 0x6a, 0x3d, 0x1f, 0xc9, 0x84, 0xcd, 0xa9, 0x2e, 0x3a, 0xf8, 0xee, 0xa0,
            0x79, 0x86, 0xc6, 0xf4, 0x41, 0xe6, 0x6b, 0x41, 0x7f, 0x24, 0x2e, 0xae, 0xfc, 0x3d,
            0xae, 0x48, 0x28, 0xc7, 0x9a, 0x9c, 0x0e, 0xb4, 0x5f, 0x71, 0xf4, 0x2c, 0x2b, 0x1f,
            0xc6, 0xc2, 0xb5, 0x6b, 0xa0, 0x32, 0xdd, 0x1d, 0xbf, 0x95, 0x5c, 0xd0, 0x0a, 0xfa,
            0xdf, 0x48, 0x03, 0x67, 0x5d, 0x19, 0x5d, 0x51, 0xa6, 0xf4, 0x6d, 0x2f, 0x44, 0xdc,
            0x6e, 0x9f, 0x20, 0x27, 0x09, 0xce, 0x49, 0xa1, 0x46, 0xa0, 0x81, 0x40, 0x18, 0x77,
            0xdd, 0x0d, 0x38, 0x8d, 0x0b, 0xe7, 0xea, 0x14, 0xb4, 0xa0, 0xb7, 0xda, 0x25, 0xce,
            0x60, 0x62, 0xaa, 0x0d, 0xcf, 0x34, 0x4e, 0xf3, 0xc2, 0xc0, 0x36, 0xb3, 0x90, 0xc7,
            0xa0, 0x40, 0xbe, 0xf8, 0xc4, 0xd8, 0x2b, 0xd6, 0x55, 0x69, 0xeb, 0xb3, 0x1d, 0xe2,
            0x8b, 0xda, 0x9c, 0x4f, 0x3b, 0x04, 0xe4, 0xdb, 0x5b, 0xb7, 0x5f, 0x6e, 0x4c, 0x45,
            0x51, 0x9e, 0x82, 0x08, 0xda, 0xa0, 0x53, 0x16, 0x37, 0x04, 0xba, 0x1f, 0x4b, 0x91,
            0x7d, 0x22, 0xf8, 0x95, 0xf0, 0xbe, 0x61, 0x7e, 0x09, 0xed, 0xe7, 0xb3, 0x87, 0xa1,
            0xfb, 0x38, 0x2d, 0x8f, 0xe5, 0x45, 0x03, 0x1f, 0x76, 0x44, 0xa0, 0x4f, 0x0c, 0x25,
            0xfc, 0x0e, 0xfb, 0x33, 0x22, 0xb0, 0xbb, 0x17, 0xa5, 0xe4, 0x31, 0x90, 0xd3, 0x64,
            0x94, 0x51, 0x73, 0x76, 0x4c, 0x91, 0x99, 0x80, 0xb9, 0xbc, 0xcb, 0xe5, 0x14, 0x50,
            0x3f, 0xa0, 0xfd, 0x5a, 0x44, 0x07, 0xf9, 0x74, 0x16, 0x7a, 0xf1, 0x03, 0xc9, 0x4e,
            0x48, 0x2b, 0x96, 0x23, 0xbb, 0x43, 0xcf, 0xc3, 0xa7, 0xc7, 0x98, 0x9e, 0x00, 0x21,
            0xe0, 0x4d, 0x47, 0x31, 0x58, 0x41, 0xa0, 0x35, 0x54, 0x86, 0x0e, 0x3c, 0x56, 0x9c,
            0x88, 0xb2, 0xa9, 0xb7, 0x3f, 0x72, 0x69, 0x09, 0x48, 0x42, 0xbb, 0x5c, 0x6b, 0x95,
            0x1e, 0x00, 0xba, 0xae, 0x67, 0xee, 0xfd, 0x6b, 0x67, 0x7e, 0x70, 0xa0, 0x36, 0xb8,
            0xaf, 0xbf, 0x20, 0x69, 0x30, 0x6b, 0x67, 0x97, 0x30, 0x1f, 0x49, 0xa4, 0xa1, 0x0e,
            0xe9, 0x8c, 0xa2, 0x5c, 0x6c, 0xc7, 0x6f, 0x10, 0x79, 0xc3, 0xf1, 0x79, 0xf8, 0x90,
            0x56, 0xdc, 0xa0, 0x46, 0x3d, 0xe5, 0x4b, 0xeb, 0xde, 0xcd, 0x0b, 0x81, 0x24, 0x6f,
            0xa8, 0xe3, 0xce, 0xbc, 0x08, 0x15, 0xe0, 0xc9, 0x57, 0xce, 0xe9, 0xf2, 0x3e, 0xf3,
            0xac, 0x7f, 0xda, 0x5a, 0x9a, 0x84, 0x77, 0xa0, 0xda, 0x55, 0x99, 0xe1, 0xf3, 0xd5,
            0x8e, 0xd6, 0xe4, 0x76, 0x14, 0x5d, 0xbb, 0x68, 0x86, 0xbb, 0x75, 0x06, 0x0e, 0xe4,
            0x72, 0xdf, 0x78, 0x5f, 0x56, 0xf1, 0x1c, 0x27, 0x4e, 0xfd, 0x06, 0x83, 0xa0, 0x00,
            0xd4, 0xb1, 0xb2, 0x8d, 0x31, 0x18, 0xc9, 0xe0, 0xc5, 0x6c, 0x8a, 0x23, 0xf5, 0xa2,
            0x33, 0x4f, 0xec, 0x69, 0x02, 0x9c, 0xfd, 0x31, 0x3f, 0x61, 0xf5, 0x9c, 0x77, 0xe5,
            0x81, 0x11, 0x6d, 0xa0, 0xe4, 0xad, 0x64, 0x57, 0x5b, 0x73, 0x3d, 0x9e, 0xa9, 0xcd,
            0xac, 0x97, 0xa4, 0x39, 0xbb, 0xdb, 0xc0, 0x68, 0x47, 0x4f, 0x0e, 0x32, 0xc0, 0xb0,
            0x44, 0xdf, 0x2e, 0xec, 0xde, 0x07, 0xd4, 0x8a, 0xa0, 0x5c, 0xbe, 0x69, 0xbc, 0x35,
            0xf0, 0xec, 0x5e, 0xef, 0x19, 0x00, 0xc2, 0x81, 0x71, 0xeb, 0x6b, 0x87, 0xba, 0x0c,
            0xe2, 0x88, 0x33, 0x8c, 0x74, 0x12, 0x6b, 0xc4, 0x8c, 0x24, 0x06, 0x1a, 0x4b, 0x80,
        ],
        [
            0xf9, 0x01, 0xd1, 0xa0, 0x7d, 0x57, 0xef, 0xba, 0x2b, 0x0d, 0x32, 0xca, 0x17, 0xe6,
            0x0f, 0x80, 0x42, 0x21, 0x7e, 0xd2, 0x7f, 0x77, 0xad, 0x82, 0x47, 0xd2, 0xe0, 0xe3,
            0xdb, 0x85, 0xf2, 0xd8, 0x4b, 0xc8, 0xca, 0xcd, 0xa0, 0x22, 0xf3, 0x44, 0xfe, 0xd7,
            0xc9, 0x8d, 0x17, 0x90, 0x14, 0xdf, 0x35, 0x31, 0x72, 0x3a, 0x24, 0x8e, 0x1a, 0xbb,
            0xaf, 0x4f, 0xfb, 0x95, 0x4e, 0xa8, 0xb5, 0xa8, 0xfc, 0x93, 0x3b, 0x3f, 0x3a, 0xa0,
            0x30, 0x96, 0xfa, 0x0f, 0xa1, 0xee, 0x14, 0x6c, 0x8a, 0xa5, 0x86, 0x8f, 0x80, 0x9e,
            0xe5, 0x77, 0xf3, 0xf5, 0xba, 0xa3, 0x9f, 0x76, 0x86, 0x50, 0x2d, 0x78, 0x4d, 0x8e,
            0xdc, 0x68, 0xa4, 0xc5, 0xa0, 0x9e, 0xd4, 0xf4, 0x80, 0xf1, 0x4b, 0x8c, 0x09, 0xa8,
            0x9d, 0x53, 0x0f, 0xc8, 0x75, 0xd1, 0x88, 0x32, 0x02, 0x67, 0x5b, 0x03, 0x6c, 0xd5,
            0x53, 0xba, 0xa6, 0xb0, 0xee, 0xfc, 0xdf, 0x69, 0xcc, 0xa0, 0xd5, 0x0b, 0x5d, 0xf3,
            0x05, 0x43, 0xf6, 0x04, 0x71, 0xc6, 0x20, 0x01, 0x37, 0xe9, 0x5a, 0x35, 0x31, 0xa4,
            0x29, 0xe3, 0x2b, 0x9f, 0xe4, 0x37, 0x24, 0x5c, 0x93, 0x02, 0x28, 0x5c, 0x65, 0x54,
            0xa0, 0x6a, 0x82, 0x6f, 0x60, 0x96, 0x3d, 0xd4, 0x5f, 0x9d, 0xae, 0x25, 0xdf, 0x46,
            0xa4, 0x2e, 0x49, 0xe0, 0xb3, 0x42, 0x30, 0xb8, 0xf3, 0xb3, 0xd7, 0xd3, 0xf4, 0x97,
            0xc4, 0xd1, 0xd0, 0xfb, 0xbc, 0xa0, 0x80, 0xfb, 0x79, 0x1a, 0x67, 0xee, 0x2a, 0xb0,
            0x2c, 0xcd, 0xba, 0x4e, 0x7c, 0x4c, 0xc6, 0x5d, 0xcf, 0x68, 0x5f, 0xe2, 0xcc, 0xdc,
            0x69, 0xe9, 0x95, 0xba, 0x3e, 0xb4, 0x54, 0x4c, 0x13, 0x74, 0x80, 0xa0, 0x32, 0x64,
            0x81, 0x6a, 0xf1, 0x40, 0x08, 0x93, 0x6c, 0xf4, 0x9d, 0x22, 0x15, 0x27, 0x3b, 0x87,
            0x62, 0x48, 0x9e, 0x74, 0x3f, 0x5b, 0xbb, 0x27, 0x9a, 0x7a, 0xce, 0xe5, 0x1c, 0x0d,
            0xae, 0xf6, 0xa0, 0x7a, 0x95, 0x0a, 0x56, 0x88, 0x3a, 0xb7, 0x73, 0xc8, 0xd8, 0xba,
            0x53, 0xe1, 0x6e, 0x7f, 0x97, 0x97, 0xd9, 0x87, 0x58, 0xae, 0xbd, 0x07, 0x8c, 0x55,
            0xd9, 0x3e, 0x05, 0x30, 0xe1, 0xe0, 0xef, 0xa0, 0x1c, 0x82, 0xa6, 0x9d, 0xa7, 0x6a,
            0x57, 0xda, 0x45, 0x2a, 0xae, 0x1b, 0x8b, 0x14, 0xa6, 0x2f, 0x63, 0x9a, 0xfc, 0x60,
            0x78, 0xce, 0x11, 0xb7, 0xbe, 0x60, 0xce, 0xe1, 0x9b, 0x0e, 0x37, 0xda, 0xa0, 0x50,
            0x86, 0xfe, 0x71, 0x1d, 0x54, 0x09, 0x0c, 0x01, 0x0c, 0x8f, 0x6a, 0x2f, 0xeb, 0xbc,
            0x34, 0x68, 0xaa, 0xd3, 0x4b, 0xd0, 0x54, 0xfc, 0x62, 0xda, 0x3f, 0x2f, 0x5e, 0x73,
            0xe4, 0x1b, 0x5c, 0xa0, 0x44, 0x4d, 0xd0, 0x93, 0x34, 0xc9, 0x13, 0x76, 0xad, 0x8e,
            0xb0, 0xba, 0x83, 0x0d, 0x33, 0x92, 0x09, 0x09, 0xd2, 0xf5, 0x6d, 0xb6, 0x26, 0x57,
            0x16, 0xc7, 0x25, 0x59, 0x1e, 0xb2, 0x4f, 0x54, 0x80, 0xa0, 0x58, 0xc6, 0xc6, 0xc5,
            0x8c, 0x2d, 0xe9, 0x50, 0x07, 0xa9, 0xf9, 0x22, 0xc1, 0xb3, 0xbd, 0x03, 0x2f, 0xed,
            0x1b, 0xc1, 0xa6, 0x82, 0x9c, 0x2e, 0x95, 0x30, 0xcd, 0x16, 0x47, 0x97, 0x6c, 0x52,
            0xa0, 0x2e, 0x99, 0x02, 0xa0, 0x4b, 0x27, 0xa6, 0x11, 0x11, 0x92, 0x35, 0x31, 0x8c,
            0x8f, 0x12, 0x63, 0x0d, 0x58, 0xee, 0x77, 0x5a, 0x31, 0xad, 0xe3, 0x57, 0x6b, 0xe9,
            0x53, 0x42, 0x6e, 0xc2, 0xf6, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ],
        [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ],
        [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ],
        [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ],
    ];
    let storage_leaf = [
        0xec, 0x9f, 0x20, 0xef, 0xe9, 0x1b, 0x84, 0xa3, 0xf0, 0x73, 0x56, 0x24, 0xd9, 0xb5, 0xa4,
        0x1f, 0x2f, 0x1f, 0x4a, 0xa0, 0x92, 0xea, 0xac, 0x1f, 0x9d, 0x6a, 0xf0, 0x1f, 0x15, 0x9f,
        0x3c, 0x08, 0x9e, 0x8b, 0x8a, 0x02, 0x1e, 0x19, 0xe0, 0xc9, 0xba, 0xb2, 0x40, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    ];
    let storage_depth = 5;

    let value = get_storage_value(storage_value);

    verify(
        key,
        value,
        storage_hash,
        storage_nodes,
        storage_leaf,
        storage_depth,
    );
}
